# -*- coding: utf-8 -*-
#
#    Copyright © 2008 Pierre Raybaut
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#    
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#    
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# import logging
# logging.basicConfig(filename='example.log',filemode="w", level=logging.DEBUG)
# import sys

# class StreamToLogger(object):
   # """
   # Fake file-like stream object that redirects writes to a logger instance.
   # """
   # def __init__(self, logger, log_level=logging.INFO):
      # self.logger = logger
      # self.log_level = log_level
      # self.linebuf = ''
 
   # def write(self, buf):
      # for line in buf.rstrip().splitlines():
         # self.logger.log(self.log_level, line.rstrip())
 
# logging.basicConfig(
   # level=logging.DEBUG,
   # format='%(asctime)s:%(levelname)s:%(name)s:%(message)s',
   # filename="out.log",
   # filemode='a'
# )
 
# stdout_logger = logging.getLogger('STDOUT')
# sl = StreamToLogger(stdout_logger, logging.DEBUG)
# sys.stdout = sl
 
# stderr_logger = logging.getLogger('STDERR')
# sl = StreamToLogger(stderr_logger, logging.DEBUG)
# sys.stderr = sl

import os, sys, subprocess, time, optparse
import os.path as osp
import webbrowser

from PyQt4.QtCore import QLocale, QTranslator, SIGNAL
from PyQt4.QtGui import QMainWindow, QIcon, QApplication
from PyQt4.QtGui import QMenu, QSystemTrayIcon, QAction, QActionGroup
from PyQt4.uic import loadUiType

from xy.config import (CONF, STARTUP_PATH, LOG_PATH, PLUGINS, XY_VERSION,
                       DOC_PATH, default_startup)
from xyinstall import get_install_param

from xydocserver import DocServer

import xy
__version__ = xy.__version__

PYTHON_VERSION = sys.version[:sys.version.find(' ')]
PYTHON_PATH = sys.prefix

APP_NAME = "xyhome"
APP_PATH = osp.dirname(osp.realpath(__file__))
os.chdir(APP_PATH)
QTDESIGNER_UI = loadUiType(osp.join(APP_PATH,APP_NAME.lower()+'.ui'))[0]


def l_logs():
    os.startfile(LOG_PATH)

def l_startups():
    os.startfile(STARTUP_PATH)
    
def addremoveprogs():
    os.startfile('Appwiz.cpl')


class MainWindow(QMainWindow, QTDESIGNER_UI):    
    def __init__(self, opt):
        super(MainWindow, self).__init__()
        self.setupUi(self)
        
        self.initdir = STARTUP_PATH

        self.applications = self.create_application_list()
        self.consoles = self.create_console_list()
        self.docgen = self.create_docgen()
        self.core_doc = self.create_core_doc()
        self.add_doc = self.creat_additional_doc()
        
        self.categories = self.create_categories()
        self.libraries = self.create_libraries()

        self.version.setText(XY_VERSION)
        
        # Tabs
        self.tabWidget.setTabText(0,self.tr('Shortcuts'))
        self.tabWidget.setTabText(1,self.tr('Documentation'))
        self.tabWidget.setTabText(2,self.tr('About'))

        # Textes divers
        self.lb_applications.setText(self.tr('<b>Applications:</b>'))
        self.lb_consoles.setText(self.tr('<b>Interactive consoles:</b>'))
        self.lb_consoles_2.setText(self.tr('<b>General documentation:</b>'))
        self.gb_python.setTitle(self.tr('Python modules'))
        self.lb_startup.setText(self.tr('Startup script:'))
        self.lb_logging.setText(self.tr('Logging folder'))
        self.pb_applications.setToolTip(self.tr('Run selected application'))
        self.cb_spyder.setToolTip(self.tr('Select Spyder run option'))
        self.pb_spyder.setToolTip(self.tr('Run Spyder, the Scientific PYthon Development EnviRonment'))
        self.pb_consoles.setToolTip(self.tr('Open selected shell in Console 2'))
        self.pb_consoles_2.setToolTip(self.tr('Open selected shell in cmd.exe'))
        self.pb_startups.setToolTip(self.tr('Explore startup scripts folder'))
        self.pb_startups_2.setToolTip(self.tr('Refresh startup scripts list'))
        self.cb_startups.setToolTip(self.tr('Select the script that will be executed at IPython(x,y) startup'))
        self.pb_logs.setToolTip(self.tr('Explore logging folder'))
        self.xyver.setText("Python(x,y) "+XY_VERSION)
        self.pyver.setText("Python "+PYTHON_VERSION)
        self.plugins_gp.setTitle(self.tr("Installed plugins"))
        self.pb_remove.setText(self.tr("Remove plugins"))
        self.pb_plugins_refresh.setToolTip(self.tr("Refresh installed plugins list"))

        # Installed plugins
        self.refresh_plugins()
        self.connect(self.pb_remove, SIGNAL("clicked()"), addremoveprogs)
        self.connect(self.pb_plugins_refresh, SIGNAL("clicked()"), self.refresh_plugins)
        
        # Commentaires
        self.pb_pydoc.setToolTip(self.tr('Python help (docstrings)'))
        self.pb_local.setToolTip(self.tr('Local documentation folder'))
        self.pb_internet.setToolTip(self.tr('Internet website'))
        
        # Applications
        for s in self.applications:
            self.cb_applications.addItem(QIcon(s[2]),s[0])
        self.connect(self.pb_applications, SIGNAL("clicked()"), self.l_shortcuts)
        
        # Spyder
        self.cb_spyder.addItems([self.tr("none (IDE)"),
                                 '--light', '--debug'])
        self.connect(self.pb_spyder, SIGNAL("clicked()"), self.l_spyder)
        
        # Consoles
        for c in self.consoles:
            self.cb_consoles.addItem(QIcon(c[1]),c[0])
        self.connect(self.pb_consoles, SIGNAL("clicked()"), self.l_console)
        self.pb_consoles.setEnabled('console' in PLUGINS)
        self.connect(self.pb_consoles_2, SIGNAL("clicked()"), self.l_console_2)
        self.connect(self.pb_logs, SIGNAL("clicked()"), l_logs)
        self.connect(self.cb_consoles, SIGNAL("currentIndexChanged(int)"), self.changeconsole)

        # TODO: re-enable support for startup scripts
        self.groupBox.setEnabled(0)

        # Scripts de démarrage
        self.i_startup = 0
        self.scanstartup()
        self.connect(self.pb_startups, SIGNAL("clicked()"), l_startups)
        self.connect(self.pb_startups_2, SIGNAL("clicked()"), self.scanstartup)
        self.connect(self.cb_startups, SIGNAL("currentIndexChanged(int)"), self.changestartup)
        
        # Documentation générale
        for d in self.docgen:
            self.cb_documentation.addItem(QIcon(d[2]),d[0])
        self.connect(self.pb_documentation, SIGNAL("clicked()"), self.h_docgen)
        
        # Bibliothèques Python
        self.cb_categories.addItems([c[0] for c in self.categories])
        self.connect(self.cb_categories, SIGNAL("currentIndexChanged(int)"), self.refreshlist)

        self.doc_server = DocServer(port=7464)
        self.doc_server.start()

        self.connect(self.pb_pydoc, SIGNAL("clicked()"), self.h_pydoc)
        self.connect(self.pb_local, SIGNAL("clicked()"), self.h_local)
        self.connect(self.pb_internet, SIGNAL("clicked()"), self.h_web)
        self.blist=[self.pb_pydoc,self.pb_local,self.pb_internet]
        self.connect(self.list_libraries, SIGNAL("itemClicked(QListWidgetItem*)"), self.refreshbuttons)

        self.connect(self.min_btn, SIGNAL("clicked()"), self.hide)
        self.min_btn.setToolTip(self.tr('Minimize to system tray'))
        self.createTrayIcon()
        self.connect(self.trayIcon,
                SIGNAL("activated(QSystemTrayIcon::ActivationReason)"),
                self.iconActivated)
        self.trayIcon.show()
        
        self.refreshlist()

    def refresh_plugins(self):
        try:
            from xyinstall import get_install_param
        except ImportError:
            self.plugins_list.clear()
            return
        plugins = []
        for plugin in PLUGINS:
            version = get_install_param(plugin,'Version')
            if version:
                plugins.append(plugin+' '+version)
        plugins.sort()
        self.plugins_list.clear()
        self.plugins_list.addItems(plugins)

    def createTrayIcon(self):
        # System Tray Icon
        self.quitAction = QAction(self.tr("Quit"), self)
        self.connect(self.quitAction, SIGNAL("triggered()"), self.close)
        self.trayIconMenu = QMenu(self)
        
        # Documentation
        for d in self.core_doc:
            act = QAction(QIcon(d[2]), d[0], self)
            self.connect( act, SIGNAL("triggered()"), lambda doc=d: self.trig_documentation(doc) )
            self.trayIconMenu.addAction(act)

        self.add_doc_menu = QMenu(self.tr("Additional Documentation"),self)
        for d in self.add_doc:
            act = QAction(QIcon(d[2]), d[0], self)
            self.connect( act, SIGNAL("triggered()"), lambda doc=d: self.trig_documentation(doc) )
            self.add_doc_menu.addAction( act )
        self.add_doc_menu.setIcon( QIcon("img/folder.png" ))
        self.trayIconMenu.addMenu(self.add_doc_menu)
        
        self.trayIconMenu.addSeparator()
        
        # Applications
        act = QAction(QIcon("img/spyder.svg"), "Spyder", self)
        self.connect( act, SIGNAL("triggered()"), self.l_spyder )
        self.trayIconMenu.addAction(act)    
        for s in self.applications:
            act = QAction(QIcon(s[2]), s[0], self)
            self.connect( act, SIGNAL("triggered()"), lambda app=s: self.trig_applications(app) )
            self.trayIconMenu.addAction(act)
        self.trayIconMenu.addSeparator()
        
        # Consoles
        group = QActionGroup(self)
        self.act_cmd = QAction("cmd.exe", self)
        self.connect(self.act_cmd, SIGNAL("toggled(bool)"), self.toggle_cmd)
        self.act_console = QAction("console.exe", self)
        self.connect(self.act_console, SIGNAL("toggled(bool)"), self.toggle_console)
        self.cons_type_menu = QMenu(self.tr("Console type"),self)
        for action in [self.act_cmd, self.act_console]:
            action.setCheckable(True)
            group.addAction(action)
            self.cons_type_menu.addAction(action)
        self.trayIconMenu.addMenu(self.cons_type_menu)
        self.act_console.setChecked(True)
        
        for c in self.consoles:
            act = QAction(QIcon(c[1]), c[0], self)
            self.connect( act, SIGNAL("triggered()"),
                          lambda cons=c: self.trig_console(cons) )
            self.trayIconMenu.addAction(act)
        act = QAction(QIcon("img/logs.png"), self.tr('Logging folder'), self)
        self.connect(act, SIGNAL("triggered()"), l_logs)
        self.trayIconMenu.addAction(act)
        self.trayIconMenu.addSeparator()
        self.trayIconMenu.addAction(self.quitAction)
        self.trayIcon = QSystemTrayIcon(self)
        self.trayIcon.setContextMenu(self.trayIconMenu)
        self.trayIcon.setIcon(QIcon("img/app.png"))
        self.trayIcon.setToolTip('Python(x,y) Home')
    
    
    # Application list ------
    def create_application_list(self):
        app_infos = (
                    ('IPython', [("IPython Qt Console", ( osp.join( PYTHON_PATH, "Scripts", "ipython.exe" ), "qtconsole",  "--pylab=inline", "--IPythonWidget.font_size=11" ), "img/IPythonConsole.svg"),
                               #("IPython notebook server", ( osp.join( PYTHON_PATH, "Scripts", "ipython-script.py" ), "notebook",  "--pylab=inline" ), "img/qtlinguist.png"),
                               ]),
                     ('SciTE', [("SciTE", (PLUGINS.get('SciTE', '')+"\\SciTE.exe",), "img/scite.png"),
                                   ]),
                     ('IDLE', [("IDLE", (PYTHON_PATH+"\\Lib\\idlelib\\idle.pyw",), "img/tk.png"),
                              ]),
                     ('PyQt4', [("Qt Designer", (PYTHON_PATH+"\\Lib\\site-packages\\PyQt4\\designer.exe",), "img/qtdesigner.png"),
                               ("Qt Linguist", (PYTHON_PATH+"\\Lib\\site-packages\\PyQt4\\linguist.exe",), "img/qtlinguist.png"),
                               ("PyQt4 Examples", (PYTHON_PATH+"\\Lib\\site-packages\\PyQt4\\examples\\demos\\qtdemo\\qtdemo.pyw",), "img/qt.png"),
                               ]),
                     ('guiqwt', [("Sift", (sys.executable, PYTHON_PATH+"\\Lib\\site-packages\\guiqwt\\tests\\sift.py"), "img/sift.svg"),
                                 ]),
                     ('guiqwt', [("guiqwt Examples", (PYTHON_PATH+"\\Lib\\site-packages\\guiqwt\\tests\\__init__.py",), "img/guiqwt.png"),
                                 ]),
                     ('guidata', [("guidata Examples", (PYTHON_PATH+"\\Lib\\site-packages\\guidata\\tests\\__init__.py",), "img/guidata.png"),
                             ]),
                     ('Gnuplot', [("gnuplot", (PYTHON_PATH+"\\gnuplot\\binary\\wgnuplot.exe",), "img/gnuplot.png"),
                                   ]),
                     ('EnthoughtToolSuite', [("MayaVi 2", (PYTHON_PATH+"\\Scripts\\mayavi2.exe",), "img/mayavi2.png"),
                                            ]),
                     ('veusz', [("Veusz", (PYTHON_PATH+"\\Scripts\\veusz-script.pyw",), "img/veusz.png"),
                                   ]),
                     ('vitables', [("ViTables", (PYTHON_PATH+"\\Scripts\\vitables-script.pyw",), "img/vitables.png"),
                              ]),
                     )
        app_list = []
        for app, infos in app_infos:
            if (PLUGINS.has_key(app) or app=='IDLE') and osp.exists(infos[0][1][0]):
                app_list.extend(infos)
        return app_list
        
        
    # Console list ------
    def create_console_list(self):
        console_list = [
            ("IPython (sh)", "img/consolexy.png", ["--profile=pysh"]),
            ("IPython (Qt)", "img/qt.png", ["--pylab=qt"]),
            ("Python", "img/python.png", None)
        ]
        return console_list
    
    # Documentation list -----
    def create_core_doc( self ):
        docgen = [(self.tr("Documentation Folder"),
                   DOC_PATH,
                   "img/folder.png"),
                  (self.tr("Getting started with Python(x,y)"),
                   osp.join(DOC_PATH,"Python(x,y)\%s.htm") % self.tr("Getting started with Python(x,y)"),
                   "img/info.png"),
                  (self.tr("Python(x,y) website"),
                   "http://pythonxy.googlecode.com",
                   "img/www.png"),
                  (self.tr("Qt Help (Qt Assistant)"),
                   PYTHON_PATH+"\\Lib\\site-packages\\PyQt4\\assistant.exe",
                   "img/qtassistant.png"),
                  (self.tr("Python language manuals"),
                   PYTHON_PATH+("\Doc\Python%s.chm" % PYTHON_VERSION.replace('.', '')),
                   "img/chm.png"),
                  ]
        return docgen

    def creat_additional_doc( self ):
        docgen = []
        ipy_chm = DOC_PATH+"\\Libraries\\IPython\\ipython.chm"
        ipy_pdf = DOC_PATH+"\\Libraries\\IPython\\ipython.pdf"
        guidata_chm = DOC_PATH+"\\Libraries\\guidata\\guidatadoc.chm"
        guiqwt_chm = DOC_PATH+"\\Libraries\\guiqwt\\guiqwtdoc.chm"
        mpl_chm = DOC_PATH+"\\Libraries\\matplotlib\\Matplotlibdoc.chm"
        mpl_pdf = DOC_PATH+"\\Libraries\\matplotlib\\Matplotlib.pdf"
        numpy_chm = DOC_PATH+"\\Libraries\\NumPy\\numpy.chm"
        numpyref_pdf = DOC_PATH+"\\Libraries\\NumPy\\numpy-ref.pdf"
        numpyusr_pdf = DOC_PATH+"\\Libraries\\NumPy\\numpy-user.pdf"
        scipyref_pdf = DOC_PATH+"\\Libraries\\SciPy\\scipy-ref.pdf"
        scipy_chm = DOC_PATH+"\\Libraries\\SciPy\\scipy.chm"
        
        if osp.exists(ipy_chm):
            docgen.append( (self.tr("IPython manual"), ipy_chm, "img/chm.png") )
        if osp.exists(ipy_pdf):
            docgen.append( (self.tr("IPython manual"), ipy_pdf, "img/pdf.png") )
        if osp.exists(guidata_chm):
            docgen.append( ("guidata", guidata_chm, "img/chm.png") )
        if osp.exists(guiqwt_chm):
            docgen.append( ("guiqwt", guiqwt_chm, "img/chm.png") )
        if osp.exists(mpl_chm):
            docgen.append( (self.tr("Matplotlib manual"), mpl_chm, "img/chm.png") )
        elif osp.exists(mpl_pdf):
            docgen.append( (self.tr("Matplotlib manual"), mpl_pdf, "img/pdf.png") )
        if osp.exists(numpy_chm):
            docgen.append( (self.tr("NumPy module manual"), numpy_chm, "img/chm.png") )
        if osp.exists(numpyref_pdf):
            docgen.append( (self.tr("NumPy reference guide"), numpyref_pdf, "img/pdf.png") )
        if osp.exists(numpyusr_pdf):
            docgen.append( (self.tr("NumPy user guide"), numpyusr_pdf, "img/pdf.png") )
        if osp.exists(scipy_chm):
            docgen.append( (self.tr("SciPy module manual"), scipy_chm, "img/chm.png") )
        if osp.exists(scipyref_pdf):
            docgen.append( (self.tr("SciPy reference guide"), scipyref_pdf, "img/pdf.png") )
            
        return docgen
            
         
    def create_docgen(self):
        docgen = self.create_core_doc()
        docgen += self.creat_additional_doc()
        
        return docgen
        
    def create_categories(self):
        categories = [[self.tr("Scientific"),
                       ["numpy", "scipy", "numexpr",
                        "sympy", "cvxopt", "openopt", "networkx", "mdp"]],
                      [self.tr("Graphical User Interfaces"),
                       ["guidata", "PyQt4", "gtk", "wxPython"]],
                      [self.tr("2D and 3D plotting"),
                       ["guiqwt", "Qwt5", "Qwt3D", "matplotlib", "matplotlib00", "mlab"]],
                      [self.tr("Image processing"),
                       ["PIL", "opencv", "itk", "pydicom"]],
                      [self.tr("3D visualization"),
                       ["vtk", "OpenGL", "vpython"]],
                      [self.tr("Data processing"),
                       ["tables", "h5py", "netcdf4", "PyXML", "gdal",
                        "xlrd", "xlwt"]],
                      [self.tr("Installation, deployment"),
                       ["setuptools", "py2exe", "pip", "virtualenv"]],
                      [self.tr("Documentation generation"),
                       ["epydoc", "sphinx", "docutils",
                        "reportlab", "rst2pdf"]],
                      ]
        for c in categories:
            c[1] = [x for x in c[1] if PLUGINS.has_key(x.replace("00",""))]
        return categories
        
        
    def create_libraries(self):
        libraries = {"numpy" : {"pydoc" : "numpy",
                                "desc" : "numpy",
                                "local" : "Libraries\\numpy"},
                     "scipy" : {"pydoc" : "scipy",
                                "desc" : "scipy",
                                "local" : "Libraries\\scipy"},
                     "guidata" : {"pydoc" : "guidata",
                                  "desc" : "guidata",
                                  "local" : "Libraries\\guidata"},
                     "guiqwt" : {"pydoc" : "guiqwt",
                                 "desc" : "guiqwt",
                                 "local" : "Libraries\\guiqwt"},
                     "numexpr" : {"pydoc" : "numexpr",
                                "desc" : "numexpr",
                                "local" : "Libraries\\numexpr"},
                     "sympy" : {"pydoc" : "sympy",
                                "desc" : "sympy ("+self.tr("symbolic maths")+")",
                                "local" : "Libraries\\sympy"},
                     "networkx" : {"pydoc" : "networkx",
                                "desc" : "NetworkX",
                                "local" : "Libraries\\networkx"},
                     "cvxopt" : {"pydoc" : "cvxopt",
                                 "desc" : "cvxopt",
                                 "local" : "Libraries\\cvxopt"},
                     "openopt" : {"pydoc" : "scikits.openopt",
                                  "desc" : "OpenOpt",
                                  "local" : "Libraries\\openopt",
                                  "web" : "http://scipy.org/scipy/scikits/wiki/OpenOpt" },
                     "matplotlib" : {"pydoc" : "matplotlib",
                                     "desc" : "matplotlib",
                                     "local" : "Libraries\\matplotlib" },
                     "matplotlib00" : {"pydoc" : "pylab",
                                       "desc" : "pylab",
                                       "local" : "Libraries\\matplotlib"},
                     "PIL" : {"pydoc" : "PIL",
                              "desc" : "Python Imaging Library",
                              "local" : "Libraries\\PIL"},
                     "opencv" : {"pydoc" : "opencv",
                                 "desc" : "OpenCV",
                                 "local" : "Libraries\\OpenCV"},
                     "itk" : {"pydoc" : "itk",
                              "desc" : "ITK",
                              "local" : "Libraries\\ITK"},
                     "pydicom" : {"pydoc" : "pydicom",
                                  "desc" : "pydicom",
                                  "local" : "Libraries\\pydicom"},
                     "vtk" : {"pydoc" : "vtk",
                              "desc" : "VTK",
                              "local" : "Libraries\\VTK"},
                     "vpython" : {"pydoc" : "visual",
                                  "desc" : "VPython",
                                  "local" : "Libraries\\vpython"},
                     "OpenGL" : {"pydoc" : "OpenGL",
                                 "desc" : "PyOpenGL",
                                 "local" : "Libraries\\OpenGL"},
                     "PyQt4" : {"pydoc" : "PyQt4",
                                "desc" : "PyQt4",
                                "local" : "Libraries\\PyQt4"},
                     "Qwt5" : {"pydoc" : "PyQt4.Qwt5",
                               "desc" : "PyQwt",
                               "local" : "Libraries\\PyQt4\\Qwt5"},
                     "wxPython" : {"pydoc" : "wxPython",
                                   "desc" : "wxPython",
                                   "local" : "Libraries\\wxPython"},
                     "tables" : {"pydoc" : "tables",
                                 "desc" : "PyTables",
                                 "local" : "Libraries\\PyTables"},
                     "h5py" : {"pydoc" : "h5py",
                               "desc" : "h5py",
                               "local" : "Libraries\\h5py"},
                     "netcdf4" : {"pydoc" : "netCDF4",
                               "desc" : "netcdf4",
                               "local" : "Libraries\\netcdf4" },
                     "mdp" : {"pydoc" : "mdp",
                              "desc" : "MDP",
                              "local" : "Libraries\\MDP"},
                     "gdal" : {"pydoc" : "gdal",
                               "desc" : "GDAL",
                               "local" : "Libraries\\GDAL"},
                     "xlrd" : {"pydoc" : "xlrd",
                               "desc" : "xlrd",
                               "local" : "Libraries\\xlrd",},
                     "xlwt" : {"pydoc" : "xlwt",
                               "desc" : "xlwt",
                               "local" : "Libraries\\xlwt"},
                     "setuptools" : {"pydoc" : "setuptools",
                                     "desc" : "SetupTools",
                                     "local" : "Libraries\\SetupTools" },
                     "pip" : {"pydoc" : "pip",
                                     "desc" : "pip",
                                     "local" : "Libraries\\pip" },
                     "virtualenv" : {"pydoc" : "virtualenv",
                                     "desc" : "virtualenv",
                                     "local" : "Libraries\\virtualenv" },
                     "py2exe" : {"pydoc" : "py2exe",
                                 "desc" : "py2exe",
                                 "local" : "Libraries\\py2exe"},
                     "sphinx" : {"pydoc" : "sphinx",
                                 "desc" : "Sphinx",
                                 "local" : "Libraries\\sphinx"},
                     "docutils" : {"pydoc" : "docutils",
                                   "desc" : "docutils",
                                   "local" : "Libraries\\docutils"},
                     "reportlab" : {"pydoc" : "reportlab",
                                    "desc" : "ReportLab",
                                    "local" : "Libraries\\reportlab"},
                     "rst2pdf" : {"pydoc" : "rst2pdf",
                                  "desc" : "rst2pdf",
                                  "local" : "Libraries\\rst2pdf"},
                     }
        return libraries

        
    # Tray icon --------
    def toggle_cmd(self, checked):
        if checked:
            self.cons_type_menu.setIcon(QIcon("img/cmd.png"))
            self.cons_type_menu.setTitle("Console: cmd.exe")
    
    def toggle_console(self, checked):
        if checked:
            self.cons_type_menu.setIcon(QIcon("img/console.png"))
            self.cons_type_menu.setTitle("Console: console.exe")
        
    def closeEvent(self, event):
        self.doc_server.stop_serve()

        self.trayIcon.setVisible(False)
        event.accept()
            
    def iconActivated(self, reason):
        if reason == QSystemTrayIcon.DoubleClick:
            self.show()
        
    def trig_console(self, c):
        self.cb_consoles.setCurrentIndex(self.consoles.index(c))
        if self.act_console.isChecked():
            self.l_console()
        else:
            self.l_console_2()

    def trig_applications(self, c):
        self.cb_applications.setCurrentIndex(self.applications.index(c))
        self.l_shortcuts()
        
    def trig_documentation(self, c):
        os.startfile(c[1])

    def scanstartup(self):
        startup_file = CONF.get(None, 'startup')
        try:
            self.i_startup = os.listdir(STARTUP_PATH).index(startup_file)
        except ValueError:
            self.i_startup = 0
            default_startup()
        self.cb_startups.clear()
        for f in os.listdir(STARTUP_PATH):
            self.cb_startups.addItem(f)
        self.cb_startups.setCurrentIndex(self.i_startup)
                
    def refreshlist(self):
        self.list_libraries.clear()
        self.list_libraries.addItems([ self.libraries[i]["desc"] for i in self.categories[self.cb_categories.currentIndex()][1] ])
        self.refreshbuttons()
        
    def changeconsole(self):
        #self.groupBox.setEnabled(self.cb_consoles.currentIndex()==0)
        self.groupBox.setEnabled(0)

    def changestartup(self):
        CONF.set(None, 'startup', unicode(self.cb_startups.currentText()))
        
    def refreshbuttons(self):
        [b.setEnabled(self.list_libraries.currentRow()>=0) for b in self.blist]

    def l_shortcuts(self, nomprog=None):
        if nomprog is None:
            nomprog = self.applications[self.cb_applications.currentIndex()][1]

        subprocess.Popen(nomprog, shell=True)

    def l_spyder(self):
        spyder_option = str(self.cb_spyder.currentText())
        if spyder_option != '--debug':
            executable = sys.executable
        else:
            executable = sys.executable.replace('pythonw.exe', 'python.exe')
        spyder_file = osp.join( sys.exec_prefix, "Scripts", "spyder" )
        command = [executable, spyder_file ]
        if spyder_option.startswith('--'):
            command.append(spyder_option)
        subprocess.Popen(command)
        
    def l_console(self):
        os.chdir(self.initdir)

        subprocess.Popen( ('Console.exe', '-t', self.consoles[self.cb_consoles.currentIndex()][0]) )

    def l_console_2(self):
        options = self.consoles[self.cb_consoles.currentIndex()][2]
        os.chdir(self.initdir)
        if options is None:
            link = osp.join(PYTHON_PATH,unicode(self.tr("Python interpreter"))+".lnk")
        else:
            link = osp.join(PYTHON_PATH,self.consoles[self.cb_consoles.currentIndex()][0]+".lnk")
        if osp.exists(link):
            os.startfile(link)
            return

        if options is None:
            os.startfile('python.exe')
            return

        editor = '--TerminalInteractiveShell.editor=scite' if 'SciTE' in PLUGINS else ''

        # the only way found to start a shell with a new console window while using parameters
        # (which 'startfile' does not support)
        args = ["start", "ipython-script.py"]
        args += options
        args.append(editor)
        subprocess.Popen(args, shell=True)

    def h_docgen(self):
        os.startfile(self.docgen[self.cb_documentation.currentIndex()][1])

    def p_name(self):
        return self.categories[self.cb_categories.currentIndex()][1][self.list_libraries.currentRow()]

    def h_pydoc(self):
        urlpydoc = "http://localhost:7464/"
        url = urlpydoc + "%s.html" % self.libraries[self.p_name()]["pydoc"]
        webbrowser.open_new_tab( url )

    def h_local(self):
        print self.libraries[self.p_name()]["local"]
        os.startfile(osp.join(DOC_PATH,self.libraries[self.p_name()]["local"]))

    def h_web(self):
        url = get_install_param(self.p_name(), "URL")
        webbrowser.open_new_tab(url)

        
def main():
    # Get options
    parser = optparse.OptionParser("xyhome")
    parser.add_option('-m', '--minimized', dest="minimized",
                      action='store_true', default=False,
                      help="Start application minimized in system tray")
    options, _args = parser.parse_args()
    
    
    app = QApplication(sys.argv)
    locale = QLocale.system().name()
    qtTranslator = QTranslator()
    if qtTranslator.load("qt_" + locale, APP_PATH):
        app.installTranslator(qtTranslator)
    appTranslator = QTranslator()
    if appTranslator.load(APP_NAME.lower() + "_" + locale, ""):
        app.installTranslator(appTranslator)

    form=MainWindow(options)
    if options.minimized:
        form.hide()
    else:
        form.show()
    sys.exit(app.exec_())    
    
    
if __name__ == "__main__":
    main()
    